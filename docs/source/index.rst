Welcome to the qdynpylib documentation!
=======================================

qdynpylib_ provides the :mod:`QDYN` Python package that augments the
`QDYN Fortran Library`_ for quantum dynamics and control, developed in the
`group of Christiane Koch`_ at the University of Kassel.

qdynpylib_ is maintained by `Michael Goerz`_. It supports both Python 2.7, and
Python > 3.3.

.. _qdynpylib: https://github.com/goerz/qdynpylib#qdynpylib
.. _QDYN Fortran Library: https://www.qdyn-library.net
.. _group of Christiane Koch: http://www.uni-kassel.de/fb10/en/institutes/physics/research-groups/quantum-dynamics-and-control/homepage.html
.. _Michael Goerz: https://michaelgoerz.net

Installation
============

The latest official release of qdynpylib can be installed through ``pip``::

    pip install QDYN

Alternatively, you may install the latest development version directly from github::

    pip install -I git+https://github.com/goerz/qdynpylib.git#egg=QDYN

To uninstall, run::

    pip uninstall QDYN

.. note:: It is strongly recommended to use the `Anaconda Python Distribution`_

.. _Anaconda Python Distribution: https://www.continuum.io/downloads


Overview
========

qdynpylib_ extends the `QDYN Fortran library`_ in a number of ways.

Model generation
----------------

qdynpylib_ allows to build a Python workflow around the `QDYN Fortran
Library`_, by generating input data for QDYN programs. At the highest level,
the :class:`QDYN.model.LevelModel` class generates complete runfolders (data
and config files) from `numpy/scipy`_ (sparse_) matrices or from QuTiP_ objects.

Beyond that, the :mod:`QDYN.config` module provides routine for reading,
writing, and modifying config files. Numerical values (in the config file and
elsewhere) carry physical units, through the :class:`QDYN.units.UnitFloat` class.
The unit system corresponds exactly to the unit system in the
`QDYN Fortran Library`_. Input data may be generated through some of the
following:

- The :class:`QDYN.pulse.Pulse` class and pulse shape functions
  defined in :mod:`QDYN.pulse` describe numerical pulses. Furthermore, the
  :class:`QDYN.analytical_pulse.AnalyticalPulse` class represents
  analytical control pulses (not discretized to a time grid)
- The :func:`QDYN.dissipation.lindblad_ops_to_dissipator` routine
  generates dissipation superoperators
- Hilbert space states and density matrices can be initialized through the
  routines in the :mod:`QDYN.state` module

Both the QuTiP_ and QNET_ packages provide an extensive framework for
constructing quantum operators

Debugging
---------

The :mod:`QDYN.io` module provides routines for reading and writing data in
formats that some of the `QDYN Fortran Library`_ (debug) routines produce,
e.g. :func:`~QDYN.io.read_ascii_dump` and :func:`~QDYN.io.read_cmplx_array`.
This, as well as the utilities in :mod:`QDYN.testing`, is heavily used
in the test suite of the `QDYN Fortran Library`_.

Signal processing of control pulses
-----------------------------------

The :class:`~QDYN.pulse.Pulse` class has a large set of methods for
generating and processing control pulses, e.g. applying spectral filters or
resampling to a different time grid.

Running and analyzing optimizations
-----------------------------------

The :mod:`QDYN.shutil` routine contains some support utilities for setting up
and collecting data from files. Specifically for the optimization of two-qubit
quantum gates, the :class:`QDYN.gate2q.Gate2Q` represents these gates, and
allows to evaluate various figures of merit.  Additional analysis through the
framework of the Weyl chamber are available in the :mod:`QDYN.weyl` module.
The routine :func:`QDYN.prop_gate.get_prop_gate_of_t` allows to process the
file generated by the ``qdyn_prop_gate`` utility, analyzing the evolution of
a unitary gate over time.

For gradient-free optimization, analytical pulses, via the
:class:`QDYN.analytical_pulse.AnalyticalPulse`, class plays a central role.
Specifically, the
:meth:`~QDYN.analytical_pulse.AnalyticalPulse.parameters_to_array`
and :meth:`~QDYN.analytical_pulse.AnalyticalPulse.array_to_parameters` methods
can vary pulse parameters when optimizing through the
:func:`scipy.optimize.minimize` routine.

Visualization
-------------

The :mod:`QDYN.pulse.Pulse` class has several methods for visualization of pulses.
Two-qubit gates can be visualized in the Weyl chamber through the
:class:`QDYN.weyl.WeylChamber` class. The :class:`QDYN.bloch.Bloch` class,
adapted from QuTiP_, allows to visualize single qubits. Lastly,
:class:`QDYN.octutils.OCTConvergences` generates a Bokeh_ plot of the
optimization success over the iteration number.

.. _QuTiP: http://qutip.org
.. _numpy/scipy: https://scipy.org
.. _sparse: https://docs.scipy.org/doc/scipy/reference/sparse.html
.. _QNET: http://qnet.readthedocs.io/en/latest/
.. _Bokeh: http://bokeh.pydata.org/en/latest/


API
===

* :ref:`modindex`
